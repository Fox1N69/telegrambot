import asyncio
import logging
import asyncpg

from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types

BOT_TOKEN = ""

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
loop = asyncio.get_event_loop()
pool = loop.run_until_complete(create_pool())

async def create_pool():
  return await asyncpg.create_pool(database="testtask", user="postgres", password="8008", host="localhost")


async def save_audio_message(pool, file_id, file_unique_id, date):
    async with pool.acquire() as connection:
        await connection.execute("INSERT INTO audio_messages (file_id, file_unique_id, date) VALUES ($1, $2, $3)", file_id, file_unique_id, date)


#обработка аудио сообщений
@dp.message_handler(content_types=types.ContentType.AUDIO)
async def handle_audio_message(message: Message):
    audio = message.audio
    file_id = audio.file_id
    file_unique_id = audio.file_unique_id
    date = message.date

    # Сохранение аудиосообщения в базу данных
    await save_audio_message(pool, file_id, file_unique_id, date)
    await message.answer("Аудиосообщение сохранено в базе данных")

async def main(): 
  logging.basicConfig(level=logging.INFO)
  await dp.start_polling(bot)

if __name__ == "__main__":
  asyncio.run(main())